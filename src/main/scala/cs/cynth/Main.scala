package cs.cynth

import java.io.{File, FileWriter}

import scala.collection.mutable.ArrayBuffer
import scala.io.Source

// TODO:
// write write_uart in Verilog
// reset call regs
// don't check idle in call
// test example

// full grammar of operators: prefix ++, &&, ||

// remove redundant states (don't emit label, goto, make next state more sophisticated)

// define function extern or not (std)

// memory

object Preprocess {
  def main(args: Array[String]): Unit = {
    // val input = args(0)
    // val output = args(1)

    val input = "/Users/cotton/ab.spec"
    val output = "/Users/cotton/ab.scala"

    val lines = Source.fromFile(input)
      .getLines()

    val out = new FileWriter(new File(output))
    out.write("// DO NOT EDIT.\n")
    out.write("// THIS FILE IS GENERATED BY POOR MAN'S SPECIALIZER\n")

    while (lines.hasNext) {
      var line = lines.next()

      if (line.startsWith(">>>")) {
        var Array(v, lhs) = line.drop(3).split(":")
        v = v.trim
        lhs = lhs.trim

        val types = lhs.split("\\s+")

        val ab = new ArrayBuffer[String]()

        def f(): Unit = {
          line = lines.next()
          if (!line.startsWith("<<<")) {
            ab += line
            f()
          }
        }

        f()

        types.foreach { t =>
          out.write(s"// specialized $v = $t")
          out.write('\n')
          ab.foreach { line =>
            out.write(line.replace(s"$v#", t))
            out.write('\n')
          }
          out.write('\n')
        }
      } else {
        out.write(line)
        out.write('\n')
      }
    }
    out.close()
  }
}

object Main {

  def main(args: Array[String]): Unit = {
    if (false) {
      val cu = rtl.CompilationUnit.example()
      cu.emit()
    }

    if (true) {
      val text = """int f(int x) {
  int x;
}
"""

      // val cu = c.Parser.parseString(text)
      val cu = c.Parser.parseFile("src/test/resources/valid/hex-literal.c")
      cu.check()

      cu.pretty()

      cu.emit()
    }
  }
}
